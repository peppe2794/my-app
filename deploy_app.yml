---
- hosts: dev
  become: True
  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
      
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present
        
    - name: Update apt and install docker-ce
      apt: name=docker-ce state=latest
      
    - name: Install python pip
      apt:
        name: python3-pip
        state: present
    - name: Install docker-compose
      pip:
        name: docker-compose
        state: present
        
    - name: Get a list of all running containers
      docker_host_info:
        containers: True
      register: docker_info
      
    - name: Stop and remove all running containers
      docker_container:
        name: '{{ item.Names[0] | regex_replace("^/", "") }}'
        state: absent
      loop: '{{ docker_info.containers }}'
    - name: create network
      docker_network:
        name: mia_rete
        state: present
        
    - name: Start FRONT-END service
      docker_container:
        name: front-end
        image: "peppe2794/{{FRONT_END}}"
        state: started
        hostname: front-end
        cap_drop:
          - all
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start EDGE-ROUTER service
      docker_container:
        name: edge-router
        image: "weaveworksdemos/{{EDGE_ROUTER}}"
        state: started
        hostname: edge-router
        cap_drop:
          - all
        capabilities:
          - NET_BIND_SERVICE
          - CHOWN
          - SETGID
          - SETUID
          - DAC_OVERRIDE
        tmpfs: 
          - /var/run:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        ports:
          - "8080:8080"
          - "80:80"

    - name: Start CATALOGUE service
      docker_container:
        name: catalogue
        image: "weaveworksdemos/{{CATALOGUE}}"
        state: started
        hostname: catalogue
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
     
    - name: Start CATALOGUE-DB service
      docker_container:
        name: catalogue-db
        image: "weaveworksdemos/{{CATALOGUE_DB}}"
        state: started
        hostname: catalogue-db
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          MYSQL_DATABASE: "socksdb"
        network_mode: "mia_rete"
        
    - name: Start CARTS service
      docker_container:
        name: carts
        image: "weaveworksdemos/{{CARTS}}"
        state: started
        hostname: carts
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        env:
          JAVA_OPTS: "-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false"
        tmpfs:
          - /tmp:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start CARTS-DB service
      docker_container:
        name: carts-db
        image: "CARTS_DB"
        state: started
        hostname: carts-db
        capabilities:
          - CHOWN
          - SETGID
          - SETUID
        cap_drop:
          - all
        tmpfs:
          - /tmp:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start ORDERS-DB service
      docker_container:
        name: orders-db
        image: "ORDERS_DB"
        state: started
        hostname: orders-db
        capabilities:
          - CHOWN
          - SETGID
          - SETUID
        cap_drop:
          - all
        tmpfs:
          - /tmp:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start ORDERS service
      docker_container:
        name: orders
        image: "weaveworksdemos/{{ORDERS}}"
        state: started
        hostname: orders
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        env:
          JAVA_OPTS: "-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false"
        tmpfs:
          - /tmp:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
    
    - name: Start SHIPPING service
      docker_container:
        name: shipping
        image: "weaveworksdemos/{{SHIPPING}}"
        state: started
        hostname: shipping
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        env:
          JAVA_OPTS: "-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false"
        tmpfs:
          - /tmp:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
    
    - name: Start QUEUE-MASTER service
      docker_container:
        name: queue-master
        image: "weaveworksdemos/{{QUEUE_MASTER}}"
        state: started
        hostname: queue-master
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        tmpfs:
          - /tmp:rw,noexec,nosuid
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start RABBITMQ service
      docker_container:
        name: rabbitmq
        image: "{{RABBIT_MQ}}"
        state: started
        hostname: rabbitmq
        capabilities:
          - CHOWN
          - SETGID
          - SETUID
          - DAC_OVERRIDE
        cap_drop:
          - all
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
    
    - name: Start PAYMENT service
      docker_container:
        name: payment
        image: "weaveworksdemos/{{PAYMENT}}"
        state: started
        hostname: payment
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start USER service
      docker_container:
        name: user
        image: "weaveworksdemos/{{USER}}"
        state: started
        hostname: user
        capabilities:
          - NET_BIND_SERVICE
        cap_drop:
          - all
        read_only: yes
        env:
          MONGO_HOST: "user-db:27017"
        restart_policy: always
        network_mode: "mia_rete"
        
    - name: Start USER-DB service
      docker_container:
        name: user-db
        image: "weaveworksdemos/{{USER_DB}}"
        state: started
        hostname: user-db
        capabilities:
          - CHOWN
          - SETGID
          - SETUID
        cap_drop:
          - all
        tmpfs:
          - /tmp:rw,noexec,nosuid
        read_only: yes
        restart_policy: always
        network_mode: "mia_rete"

